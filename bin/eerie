#!/usr/bin/env io

Eerie
Kano setUseExternalFile(false)

Eerie do(
  _log := getSlot("log")
  _allowedModes := list("info", "error", "transaction", "install")
  _isVerbose := false

  log = method(str, mode,
    (mode == nil or self _allowedModes contains(mode)) ifTrue(
      call delegateToMethod(self, "_log")))
)

System systemInterruptHandler := method(
  Eerie Transaction releaseLock)
 
Namespaces Env := Namespace clone do(
  create := task(name,
    """Creates a new environment."""
    Eerie Env with(name) create
    "Created #{name} env." interpolate println)

  activate := task(name,
    """Sets environment as default."""
    Eerie Env named(name) activate
    "Activated #{name} env." interpolate println)

  remove := task(name,
    """Removes an env with all its packages."""
    env := Eerie Env named(name)
    if(Eerie activeEnv == env,
      "Can't remove active environment." println
    ,
      Eerie Env named(name) remove
      "Env #{name} was removed." interpolate println))

  active := task(
    """Prints the name of active env."""
    Eerie activeEnv name println)

  list := task(
    """Lists all envs. Active environment has an asterisk before its name."""

    activeEnv := Eerie activeEnv name
    Eerie envs map(name) sort foreach(env,
      if(env exSlice(0, 1) == "_",
        Eerie log(env, "debug")
      ,
        active := if(activeEnv == env, " * ", " - ")
        (active .. env) println
      )))
)

Namespaces Pkg := Namespace clone do(
    install := task(uri,
        """Installs a new package."""
        pkg := Eerie Package fromUri(uri)
        Eerie Transaction clone install(pkg) run
        // _openReadme(pkg)
    )

    _openReadme := method(pkg,
        readme := pkg info at("readme")
        readmeFile := File with(pkg path .. "/" .. readme)
        readmeFile exists ifTrue(
            "Opening readme file..." println
            # Allows user to abort with Control+C
            System sleep(4)

            openCommand := if(System platform == "Darwin", "open", System getEnvironmentVariable("EDITOR"))
            openCommand isNil ifTrue(openCommand = "more")

            System system(openCommand .. " " .. readmeFile path)
        )
    )

    # We are using Eerie usedEnv here because it will be the same as activeEnv
    # unless we modify it - as we do for plugins.
    update := task(name,
        """Updates the package and all of its dependencies."""
        pkg := Eerie usedEnv packageNamed(name)
        pkg isNil ifTrue(
            Eerie MissingPackageException raise(name)
        )

        Eerie Transaction clone update(pkg) run
    )

    updateAll := task(
        """Updates all packages within current env."""
        t := Eerie Transaction clone
        Eerie usedEnv packages foreach(pkg,
            t update(pkg)
        )
        t run
    )

    remove := task(name,
        """Removes the package."""

        pkg := Eerie usedEnv packageNamed(name)
        pkg isNil ifTrue(
            Exception raise("missingPackage", name)
        )

        Eerie Transaction clone remove(pkg) run
    )

    info := task(name,
        """Shows description of a package."""
        pkg := Eerie usedEnv packageNamed(name)
        pkg isNil ifTrue(
            Eerie MissingPackageException raise(name)
        )

        maxKeySize := pkg info keys map(size) max + 2

        pkg info foreach(key, value,
            value isKindOf(List) ifTrue(value = value join(", "))
            value isKindOf(Map) ifTrue(value = value asObject slotSummary)
            key = (key asMutable makeFirstCharacterUppercase .. ":") alignLeft(maxKeySize, " ")
            (key .. value) println
        )
    )

    doc := method(name,
        """Opens documentation for the package in the browser.
        Or opens Eerie documentation, if package name isn't specified.
        """
        if(name not,
            Docio openDocsForPackageWithName("Eerie")
            ,
            Docio openDocsForPackageWithName(name)
        )
    )

    list := task(
        """Lists all packages installed within current env."""
        Eerie usedEnv packages foreach(pkg,
            website := pkg info at("website")
            website = if(website isNil, "", " (" .. website .. ")")

            (pkg name .. " @" .. (pkg info at("version")) .. website) println
            ("  " .. (pkg info at("description"))) println
        )
    )

    hook := task(hookName, packageName,
        """Runs a hook with name at first argument for the package with name at the second one."""
        pkg := Eerie usedEnv packageNamed(name)
        pkg isNil ifTrue(
            Eerie MissingPackageException raise(name)
        )

        pkg runHook(hookName)
    )

    create := task(name, path,
        """Creates an empty package structure.
        If <path> is omitted, new directory will be created in current working directory."""
        protoName := name asMutable makeFirstCharacterUppercase
        if(path isNil or (path == "."),
            path = Directory currentWorkingDirectory .. "/" .. name
        )

        root := Directory with(path stringByExpandingTilde)
        root exists ifTrue(
            Eerie AlreadyInstalledException raise(path)
        )

        root create
        Eerie PackageDownloader clone setPath(path) createSkeleton

        pkgInfo := """|
        |{
        |  "name":         "#{name}",
        |  "version":      "0.1",
        |  "description":  "",
        |  "author":       "",
        |  "website":      "",
        |  "readme":       "README.md",
        |  "protos":       ["#{protoName}"],
        |  "dependencies": {
        |    "libs":     [],
        |    "headers":  [],
        |    "protos":   [],
        |    "packages": []
        |  }
        |}""" splitNoEmpties("\n") map(split("|") last) join("\n") strip interpolate

        root fileNamed("package.json") create openForUpdating write(pkgInfo) close
        root fileNamed("README.md") create openForUpdating write("# " .. name .. " \nDon't forget to update this doc.\n") close
        root directoryNamed("io") fileNamed(protoName .. ".io") create openForUpdating write(protoName .. " := Object clone do(\n\n)\n") close

        "New package structure has been created in #{root path}." interpolate println
    )

)

Namespaces Plugin := Namespace clone do(

    _before := method(
        Eerie Env named("_plugins") use
    )

    install := task(uri,
        """Installs a new plugin."""
        Namespaces Pkg clone install(uri)
    )

    remove := task(name,
        """Removes a plugin."""
        Namespaces Pkg clone remove(name)
    )

    update := task(name,
        """Updates the plugin."""
        Namespaces Pkg clone update(name)
    )

    list := task(
        """Lists all installed plugins."""
        Namespaces Pkg list
    )

)

Namespaces Default do(
  # Aliases
  envs     := Namespaces Env getSlot("list")
  activate := Namespaces Env getSlot("activate")
  pkgs     := Namespaces Pkg getSlot("list")
  install  := Namespaces Pkg getSlot("install")
  remove   := Namespaces Pkg getSlot("remove")
  update   := Namespaces Pkg getSlot("update")
  doc      := Namespaces Pkg getSlot("doc")
  
  selfUpdate := task(
    """Updates Eerie and its dependencies."""
    Eerie Env named("_base") use

    t := Eerie Transaction clone
    Eerie usedEnv packages foreach(pkg, t update(pkg))
    t run)
  
  releaseLock := task(
    """Removes transaction lock.
    Use only if you are sure that process which placed the lock isn't running."""
    lockFile := Eerie Transaction lockFile
    lockFile exists ifFalse(
      return("There was no lock at all." println))

    # TODO: Check if process which has lock exists and kill it.

    Eerie Transaction lockFile close remove
    "Transaction lock has been removed." println)
)

Namespaces Options do(
  s := option(
    """Print nothing to stdout."""
    Object println = method())

  verbose := option(
    """Uses verbose output - debug messages, shell commands - everything will be printed.
    Watch out for information overload."""
    Eerie _isVerbose = true
    Eerie log = Eerie getSlot("_log"))

  v := option(
    """Prints Eerie version."""
    name := Eerie Env named("_base") packageNamed("Eerie") info at("name")
    version := Eerie Env named("_base") packageNamed("Eerie") info at("version")
    description := Eerie Env named("_base") packageNamed("Eerie") info \
        at("description")
    "#{name}, #{description} v#{version}" interpolate println
  )
)

// Autorelease transaction lock on any exception
raiseMethod := Exception clone getSlot("raise")
Exception do(
    raise := method(error, nestedException,
        Eerie Transaction releaseLock
        raiseMethod(error, nestedException)
    )
)

e := try(Kano run)
e catch(Exception, 
        "Error: #{e error}" interpolate println
        Eerie _isVerbose ifTrue(e coroutine backTraceString println)
        System exit(1))
