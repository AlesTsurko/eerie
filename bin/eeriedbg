#!/usr/bin/env io

Debugger do (

    _isDebugging := true

    _previousLine := -1

    _previousLabel := ""

    _continue := false

    vmWillSendMessage := method(
        file := File with(self message label)

        if (file exists not, return) 

        # it should be separated from the previous statement, because there's
        # possible a "step in" into native code, which is unavailable as a file
        # and we should skip it, but we consider that we still inside the same
        # file
        if (self _shouldSkip,
            self _updatePrevious
            return)

        self _printHeader

        self _updatePrevious

        file contents split("\n") at(self _previousLine - 1) println

        if (self _continue, return)

        self _prompt)

    _shouldSkip := method(
        return (self _previousLine == self message lineNumber and \
            self _previousLabel == self message label))

    _updatePrevious := method(
        self _previousLine = self message lineNumber
        self _previousLabel = self message label)

    _printHeader := method(
        if (self message label != self _previousLabel, 
            ("\n------------ #{self message label}:" ..
                "#{self message lineNumber}\n") interpolate println))

    _prompt := method(
        stream := File standardInput

        answer := "-"
        while (answer isEmpty not,
            answer = stream readLine("> ")
            if (answer isNil) then (
                System exit
            ) elseif (answer == ":continue") then (
                self _continue = true
                return)
            self messageSelf doString(answer)))

)

CLI := Object clone do (

    run := method(
        if (System args size < 2, 
            File standardError write("Error: file ins't specified\n")
            System exit(1))

        file := File with(Path absolute(System args at(1)))

        if (file exists not, 
            File standardError write(
                "Error: file #{file path} doesn't exist\n" interpolate)
            System exit(1))

        "Start debugging #{file path}." interpolate println
        "Press Enter to execute next message." println
        "Ctrl-D or Ctrl-C to stop." println
        ("You can execute Io code in the prompt (i.e. after '>' symbol).\n" ..
            "The code is executed in the context of the current " .. 
            "message.") println
        ("Enter ':continue' to continue program execution until the next " .. 
            "breakpoint.") println

        # in case the file parses arguments too
        System args = System args slice(1)

        Lobby doFile(file path))

)

CLI run
