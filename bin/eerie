#!/usr/bin/env io
Eerie
Kano setUseExternalFile(false)

Eerie do(
  _log := getSlot("log")
  log = method(str, mode,
    (mode == nil or mode == "info" or mode == "error") ifTrue(
      self _log(str, mode)))
)

Namespaces Env := Namespace clone do(
  create := task(name,
    """Creates a new environment."""
    Eerie Env with(name) create
    "Created #{name} env." interpolate println)

  activate := task(name,
    """Sets environment as default."""
    Eerie Env named(name) activate
    "Activated #{name} env." interpolate println)

  remove := task(name,
    """Removes an env with all its packages."""
    Eerie Env named(name) remove
    "Env #{name} was removed." interpolate println)

  active := task(
    """Prints the name of active env."""
    Eerie activeEnv name println)
)

Eerie describe do(
  setNamespace(Namespaces Env)
  task("list") do(
    describe("Lists all available environments.")
    callsSlot("envs")

    after(envs,
      envs = envs map(env,
        if(env isActive, env name .. " [A]", env name))
      envs select(!= nil)\
        select(exSlice(0, 1) != "_")\
        sort)

    returns(List, Map with("joinWith", "\n",
                           "bullet", "*",
                           "indent", 1))
  )
) done

Namespaces Pkg := Namespace clone do(
  install := task(uri,
    """Installs a new package."""
    pkg := Eerie Package fromUri(uri)
    pkg install
    "Package #{pkg name} has been installed." interpolate println

    readme := pkg config at("meta") ?at("readme")
    readmeFile := File with(pkg path .. "/" .. readme)
    readmeFile exists ifTrue(
      "Opening readme file..." println
      # Allows user to abort with Control+C
      System sleep(2)

      openCommand := if(System platform == "Darwin", "open", System getEnvironmentVariable("EDITOR"))
      openCommand isNil ifTrue(openCommand = "most")

      System system(openCommand .. " " .. readmeFile path)))

  update := task(name,
    """Updates the package and all of its dependencies."""
    Eerie activeEnv packageNamed(name) ?update
    "Package #{name} has been updated." interpolate println)

  updateAll := task(
    """Updates all packages within current env."""
    Eerie activeEnv packages foreach(pkg,
      pkg update ifTrue("#{pkg name} has been updated." interpolate println)))

  remove := task(name,
    """Removes the package."""
    Eerie activeEnv packageNamed(name) ?remove
    "Package #{name} has been removed." interpolate println)

  info := task(name,
    """Shows description of a package."""
    pkg := Eerie activeEnv packageNamed(name)
    pkg isNil ifTrue(
      Exception raise("No such package exists."))
    
    meta := pkg config at("meta")
    maxKeySize := meta keys map(size) max + 2

    meta foreach(key, value,
      value isKindOf(List) ifTrue(value = value join(", "))
      value isKindOf(Map) ifTrue(value = value asObject slotSummary)
      key = (key asMutable makeFirstCharacterUppercase .. ":") alignLeft(maxKeySize, " ")
      (key .. value) println))

  list := task(
    """Lists all packages installed within current env."""
    Eerie activeEnv packages foreach(pkg,
      meta := pkg config at("meta")
      (pkg name .. " @" .. meta at("version")) println
      ("  " .. meta at("description")) println))
)

Namespaces Default do(
  selfUpdate := task(
    """Updates Eerie and its dependencies."""
    Eerie Env named("_base") use
    Eerie usedEnv packages foreach(update))

  envs    := Namespaces Env getSlot("list")
  pkgs    := Namespaces Pkg getSlot("list")
  install := Namespaces Pkg getSlot("install")
  remove  := Namespaces Pkg getSlot("remove")
)

Namespaces Options do(
  v := option(
    """Use verbose output."""
    Eerie log = Eerie getSlot("_log"))
)

Kano run
