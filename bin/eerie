#!/usr/bin/env io
Eerie
Kano setUseExternalFile(false)

Eerie do(
  _log := getSlot("log")
  log = method(str, mode,
    (mode == nil or mode == "info" or mode == "error") ifTrue(
      self _log(str, mode)))
)

Namespaces Env := Namespace clone
Eerie Env describe do(
  setNamespace(Namespaces Env)
  setRequiresClone(true)

  createClone = method(args,
    Eerie Env named(args removeFirst))

  task("create") do(
    describe("Creates a new environment.")
    createClone = method(args,
      self targetObj with(args removeFirst))

    after(r, "Created #{self targetObj name} env." interpolate)
  )

  task("activate") do(
    describe("Activates the environment, all binaries and addons in it will be loaded by default.")
    after(env, "Activated #{env name} env." interpolate)
  )

  task("remove") do(
    describe("Removes an env with all its packages.")
    after(r, "#{self targetObj name} was removed." interpolate)
  )

  # TODO: Clone envs
  #task("clone") do(
  #  describe("Creates a new env with packages of an existing one.")
  #  callsSlot("cloneAs")
  #)
) done

Eerie describe do(
  setNamespace(Namespaces Env)

  task("active") do(
    describe("Prints the name of active environment.")
    callsSlot("activeEnv")

    after(env, env name)
  )

  task("list") do(
    describe("Lists all available environments.")
    callsSlot("envs")

    after(envs,
      envs  map(env, if(env isActive, env name .. " *", env name))\
            select(!= nil)\
            select(exSlice(0, 1) != "_")\
            sort)
    returns(List, Map with("joinWith", "\n"))
  )
) done

Namespaces Pkg := Namespace clone
Eerie Package describe do(
  setNamespace(Namespaces Pkg)
  setRequiresClone(true)

  createClone = method(args,
    Eerie activeEnv packageNamed(args removeFirst))

  task("install") do(
    describe("Installs a new package.")
    createClone = method(args,
      Eerie Package fromUri(args removeFirst))

    after(pkg,
      "Package #{pkg name} has been installed." interpolate println

      readme := pkg config at("meta") ?at("readme")
      if(readme isNil,
        ""
      ,
        readmeFile := File with(pkg path .. "/" .. readme)
        readmeFile exists ifFalse(return(""))

        "Opening readme file..." println
        System sleep(2)

        openCommand := if(System platform == "Darwin", "open", System getEnvironmentVariable("EDITOR"))
        openCommand isNil ifTrue(openCommand = "more")

        System system(openCommand .. " " .. readmeFile path)
        ""))
  )

  task("update") do(
    describe("Updates the package and all of its submodules.")
    after(result, "Package #{self targetObj name} has been updated." interpolate)
  )

  task("updateAll") do(
    describe("Updates all packages within current env.")
    setTargetObj(Eerie activeEnv)
    callsSlot("packages")

    after(packages, packages foreach(update); "")
  )

  task("remove") do(
    describe("Removes the package.")
    after(result, "Package #{self targetObj name} has been removed." interpolate)
  )

  task("list") do(
    describe("Lists all packages installed within current env.")
    setTargetObj(Eerie activeEnv)
    callsSlot("packages")

    after(pkgs, pkgs map(name))
    returns(List, Map with("joinWith", "\n"))
  )
) done

Namespaces Default do(
  selfUpdate := task(
    Eerie Env named("_base") use
    Eerie activeEnv packageNamed("Eerie") update)

  envs    := Namespaces Env getSlot("list")
  pkgs    := Namespaces Pkg getSlot("list")
  install := Namespaces Pkg getSlot("install")
  remove  := Namespaces Pkg getSlot("remove")
)

Kano run
