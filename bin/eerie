#!/usr/bin/env io

Eerie
Kano setUseExternalFile(false)

Eerie do(
  _log := getSlot("log")
  _allowedModes := list("info", "error", "transaction", "install")

  log = method(str, mode,
    (mode == nil or self _allowedModes contains(mode)) ifTrue(
      call delegateToMethod(self, "_log")))
)

System systemInterruptHandler := method(
  Eerie Transaction releaseLock)
 
Namespaces Env := Namespace clone do(
  create := task(name,
    """Creates a new environment."""
    Eerie Env with(name) create
    "Created #{name} env." interpolate println)

  activate := task(name,
    """Sets environment as default."""
    Eerie Env named(name) activate
    "Activated #{name} env." interpolate println)

  remove := task(name,
    """Removes an env with all its packages."""
    env := Eerie Env named(name)
    if(Eerie Env activeEnv == env,
      "Can't remove active environment." println
    ,
      Eerie Env named(name) remove
      "Env #{name} was removed." interpolate println))

  active := task(
    """Prints the name of active env."""
    Eerie activeEnv name println)

  list := task(
    """Lists all envs. Active environment has an asterisk before its name."""

    activeEnv := Eerie activeEnv name
    Eerie envs map(name) sort foreach(env,
      if(env exSlice(0, 1) == "_",
        Eerie log(env, "debug")
      ,
        active := if(activeEnv == env, " * ", " - ")
        (active .. env) println
      )))
)

Namespaces Pkg := Namespace clone do(
  install := task(uri,
    """Installs a new package."""
    pkg := Eerie Package fromUri(uri)

    Eerie Transaction clone install(pkg) run

    readme := pkg info at("readme")
    readmeFile := File with(pkg path .. "/" .. readme)
    readmeFile exists ifTrue(
      "Opening readme file..." println
      # Allows user to abort with Control+C
      System sleep(4)

      openCommand := if(System platform == "Darwin", "open", System getEnvironmentVariable("EDITOR"))
      openCommand isNil ifTrue(openCommand = "more")

      System system(openCommand .. " " .. readmeFile path)))

  # We are using Eerie usedEnv here because it will be the same as activeEnv
  # unless we modify it - as we do for plugins.
  update := task(name,
    """Updates the package and all of its dependencies."""
    pkg := Eerie usedEnv packageNamed(name)
    pkg isNil ifTrue(
        Eerie MissingPackageException raise(name))

    Eerie Transaction clone update(pkg) run)

  updateAll := task(
    """Updates all packages within current env."""
    t := Eerie Transaction clone
    Eerie usedEnv packages foreach(pkg,
      t update(pkg))
    t run)

  remove := task(name,
    """Removes the package."""
    
    pkg := Eerie usedEnv packageNamed(name)
    pkg isNil ifTrue(
      Exception raise("missingPackage", name))
    
    Eerie Transaction clone remove(pkg) run)

  info := task(name,
    """Shows description of a package."""
    pkg := Eerie usedEnv packageNamed(name)
    pkg isNil ifTrue(
      Eerie MissingPackageException raise(name))

    maxKeySize := pkg info keys map(size) max + 2

    pkg info foreach(key, value,
      value isKindOf(List) ifTrue(value = value join(", "))
      value isKindOf(Map) ifTrue(value = value asObject slotSummary)
      key = (key asMutable makeFirstCharacterUppercase .. ":") alignLeft(maxKeySize, " ")
      (key .. value) println))

  list := task(
    """Lists all packages installed within current env."""
    Eerie usedEnv packages foreach(pkg,
      website := pkg info at("website")
      website = if(website isNil, "", " (" .. website .. ")")

      (pkg name .. " @" .. (pkg info at("version")) .. website) println
      ("  " .. (pkg info at("description"))) println))

  create := task(name, path,
    """Creates an empty package structure.
    If <path> is omitted, new directory will be created in current working directory."""
    name = name asMutable makeFirstCharacterUppercase
    path isNil ifTrue(
      path = Directory currentWorkingDirectory .. "/" .. name)

    root := Directory with(path)
    root exists ifTrue(
      Eerie AlreadyInstalledException raise(path))

    root create
    Eerie PackageDownloader clone setPath(path) createSkeleton

    pkgInfo := """|
    |{
    |  "version":      "0.1",
    |  "description":  "My cool new project.",
    |  "author":       "#{User name}",
    |  "website":      "http://#{name}-project.org/",
    |  "readme":       "README",
    |  "protos":       ["#{name}"],
    |  "dependencies": {
    |    "libs":     [],
    |    "headers":  [],
    |    "protos":   [],
    |    "packages": []
    |  }
    |}""" splitNoEmpties("\n") map(split("|") last) join("\n") strip interpolate

    root fileNamed("package.json") create openForUpdating write(pkgInfo) close
    root fileNamed("README") create openForUpdating write("=== " .. name .. " ===\nDon't forget to update this doc.\n") close
    root directoryNamed("io") fileNamed(name .. ".io") create openForUpdating write(name .. " := Object clone do(\n\n)\n") close

    "New package structure has been created in #{root path}." interpolate println)
)

Namespaces Plugin := Namespace clone do(
  _before := method(
    Eerie Env named("_plugins") use)

  install := Namespaces Pkg getSlot("install")  setSlot("description", "Installs new plugin.")
  remove  := Namespaces Pkg getSlot("remove")   setSlot("description", "Removes a plugin.")
  list    := Namespaces Pkg getSlot("list")     setSlot("description", "Lists all installed plugins.")
)

Namespaces Default do(
  # Aliases
  envs      := Namespaces Env getSlot("list")
  activate  := Namespaces Env getSlot("activate")
  pkgs      := Namespaces Pkg getSlot("list")
  install   := Namespaces Pkg getSlot("install")
  remove    := Namespaces Pkg getSlot("remove")
  update    := Namespaces Pkg getSlot("update")
  
  selfUpdate := task(
    """Updates Eerie and its dependencies."""
    Eerie Env named("_base") use

    t := Eerie Transaction clone
    Eerie usedEnv packages foreach(pkg, t update(pkg))
    t run)
  
  releaseLock := task(
    """Removes transaction lock.
    Use only if you are sure that process which placed the lock isn't running."""
    lockFile := Eerie Transaction lockFile
    lockFile exists ifFalse(
      return("There was no lock at all." println))

    # TODO: Check if process which has lock exists and kill it.

    Eerie Transaction lockFile close remove
    "Transaction lock has been removed." println)
)

Namespaces Options do(
  s := option(
    """Print nothing to stdout."""
    Object println = method())

  v := option(
    """Uses verbose output - debug messages, shell commands - everything will be printed.
    Watch out for information overload."""
    Eerie log = Eerie getSlot("_log"))

  V := option(
    """Prints Eerie version."""
    Eerie Env named("_base") packageNamed("Eerie") info at("version") println)
)

Kano run
